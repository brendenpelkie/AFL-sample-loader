#!/usr/bin/env python

import argparse
import json
import subprocess,shlex

if __name__=="__main__":
    parser = argparse.ArgumentParser(
            usage= 'roboctl (start || stop || restart || status) (loader || robot || sample)'
            )
    parser.add_argument('command',choices=['start','stop','restart','status'])
    parser.add_argument('server_names',nargs='*')
    parser.add_argument('--config_file',default='/home/nistoroboto/nistoroboto/launchers/config.json')
    args = parser.parse_args()
    
    with open(args.config_file) as f:
        server_config = json.load(f)
    
    for server_name in args.server_names:
        cmds = []

        if server_name not in server_config:
            raise ValueError(f'{server_name} not found in loaded config: {list(server_config.keys())}')
        
        host = server_config[server_name]['host']
        screen_name = server_config[server_name]['screen_name']
        server_script = server_config[server_name]['server_script']

        if (args.command == 'stop') or (args.command == 'restart'):
            print(f'--> Stopping {screen_name} in screen session on {host}...')
            cmd = f'screen -X -S {screen_name} quit'
            #cmd += f'rm -f screenlog.*'
            cmds.append(cmd)

        if (args.command == 'start') or (args.command == 'restart'):
            print(f'--> Starting {screen_name} in screen session on {host}...')
            # cmd = f'screen -d -m -L -S {screen_name} {server_script}'
            cmd = f'screen -d -m -S {screen_name} {server_script}'
            cmds.append(cmd)

        if args.command == 'status':
            print(f'--> Getting status of {screen_name} in screen session on {host}...')
            cmd = f'screen -ls;'
            # cmd = f'tail -n 100 screenlog.*;'
            cmds.append(cmd)

        for cmd in cmds:
            if (not (host=='localhost')):
                cmd = f"ssh {host} -f '{cmd}'"

            print(f'--> Running command: {cmd}')
            p = subprocess.Popen(shlex.split(cmd),stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
            stdout = p.communicate()[0].decode('utf8')
            print(f'--> Command Outputâ†´\n{stdout}')
            print(80*'-')
    print('==>Done!')
        


